// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/stashapp/stash/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SceneFilterReaderWriter is an autogenerated mock type for the SceneFilterReaderWriter type
type SceneFilterReaderWriter struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *SceneFilterReaderWriter) All(ctx context.Context) ([]*models.SceneFilter, error) {
	ret := _m.Called(ctx)

	var r0 []*models.SceneFilter
	if rf, ok := ret.Get(0).(func(context.Context) []*models.SceneFilter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SceneFilter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields: ctx
func (_m *SceneFilterReaderWriter) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, newSceneFilter
func (_m *SceneFilterReaderWriter) Create(ctx context.Context, newSceneFilter *models.SceneFilter) error {
	ret := _m.Called(ctx, newSceneFilter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SceneFilter) error); ok {
		r0 = rf(ctx, newSceneFilter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: ctx, id
func (_m *SceneFilterReaderWriter) Destroy(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, id
func (_m *SceneFilterReaderWriter) Find(ctx context.Context, id int) (*models.SceneFilter, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.SceneFilter
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.SceneFilter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SceneFilter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySceneID provides a mock function with given fields: ctx, sceneID
func (_m *SceneFilterReaderWriter) FindBySceneID(ctx context.Context, sceneID int) ([]*models.SceneFilter, error) {
	ret := _m.Called(ctx, sceneID)

	var r0 []*models.SceneFilter
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.SceneFilter); ok {
		r0 = rf(ctx, sceneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SceneFilter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sceneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, ids
func (_m *SceneFilterReaderWriter) FindMany(ctx context.Context, ids []int) ([]*models.SceneFilter, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*models.SceneFilter
	if rf, ok := ret.Get(0).(func(context.Context, []int) []*models.SceneFilter); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SceneFilter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, sceneFilterFilter, findFilter
func (_m *SceneFilterReaderWriter) Query(ctx context.Context, sceneFilterFilter *models.SceneFilterFilterType, findFilter *models.FindFilterType) ([]*models.SceneFilter, int, error) {
	ret := _m.Called(ctx, sceneFilterFilter, findFilter)

	var r0 []*models.SceneFilter
	if rf, ok := ret.Get(0).(func(context.Context, *models.SceneFilterFilterType, *models.FindFilterType) []*models.SceneFilter); ok {
		r0 = rf(ctx, sceneFilterFilter, findFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SceneFilter)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, *models.SceneFilterFilterType, *models.FindFilterType) int); ok {
		r1 = rf(ctx, sceneFilterFilter, findFilter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *models.SceneFilterFilterType, *models.FindFilterType) error); ok {
		r2 = rf(ctx, sceneFilterFilter, findFilter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryCount provides a mock function with given fields: ctx, sceneFilterFilter, findFilter
func (_m *SceneFilterReaderWriter) QueryCount(ctx context.Context, sceneFilterFilter *models.SceneFilterFilterType, findFilter *models.FindFilterType) (int, error) {
	ret := _m.Called(ctx, sceneFilterFilter, findFilter)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *models.SceneFilterFilterType, *models.FindFilterType) int); ok {
		r0 = rf(ctx, sceneFilterFilter, findFilter)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.SceneFilterFilterType, *models.FindFilterType) error); ok {
		r1 = rf(ctx, sceneFilterFilter, findFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updatedSceneFilter
func (_m *SceneFilterReaderWriter) Update(ctx context.Context, updatedSceneFilter *models.SceneFilter) error {
	ret := _m.Called(ctx, updatedSceneFilter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SceneFilter) error); ok {
		r0 = rf(ctx, updatedSceneFilter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
